1) “Software Engineering is part of System
Engineering Process”. Do you agree with the 
above statement? Justify your answer

    Software engineering is not part of the
 systems engineering process. (By the way, it 
is “Systems (plural) Engineering.”

The conduct of Systems Engineering planning 
does not require knowledge or training in the 
physical sciences. Input from those using
Systems Engineering is based on the 
traditional areas of engineering.

Systems Engineering can be employed for 
Software engineering. As an aside, there are 
software programs to assist in the Systems 
Engineering procedure and in the documentation 
of results. In fact, the challenge of 
designing a complete, logical software 
program in the past may have contributed to 
the formulating of some of the logic, the 
steps in systems engineering.

Systems Engineering is a methodical, 
disciplined, documented process for 
establishing what has to be done to fulfill 
the objectives of a planned system (a product 
or process).

A “Mission Statement” is agreed upon. A 
functional analysis is performed. The 
requirements to provide the functions are 
driven out. The interfaces of the functions 
are identified.

The stakeholders and the subject matter 
experts attend periodic meetings to do the 
above, to comment, give input, and to 
understand their role in the whole process. 
Those in attendance may include every type of 
engineer: software, electrical, electronic, 
mechanical, chemical, materials, ceramic, 
civil.

But the person managing and conducting the
process (the systems engineer) might be an
engineer of the type listed above, but does
not have to be an engineer. The systems 
engineering process leader is analogous to 
an orchestra conductor. An orchestra 
conductor ensures that everyone is following
 the music at the same time, but he does not 
have to know how to play any of the 
instruments.

2) What is “Software Crisis”?

      Software crisis is a term used in the 
early days of computing science for the 
difficulty of writing useful and efficient 
computer programs in the required time. The 
software crisis was due to the rapid increases
in computer power and the complexity of the
problems that could now be tackled. With the 
increase in the complexity of the software, 
many software problems arose because existing 
methods were inadequate.

The term "software crisis" was coined by some
attendees at the first NATO Software 
Engineering Conference in 1968 at Garmisch, 
Germany.

3) What are the professional responsibilities
 of a software engineer?

       Perform systems modeling, simulation 
plus evaluation to provide suitable software 
solutions.

Design and prepare assemblers, utility 
programs, compilers and operating systems 
to accomplish customer business needs.

Provide all required input for documents of 
new and existing programs to assure 
information accessibility as needed.

Participate to design, develop, troubleshoot 
and analyze software programs operating with 
hardware systems.

Support customizing purchased applications 
plus assist to maintain program libraries 
along with manuals on basis of research as 
well as customer needs.

Provide feedback plus reports to management 
pertinent to status as well as availability 
of hardware and software to assure appropriate
functioning.

Perform with customers to present hands-on 
first level assistance.

Support requirements gathering along with 
proposal development inclusive of effort 
estimation interacting directly with clients.

Learn and interpret Navitaire products 
related to software engineering.

Suggest sound customization and integrate 
solutions on basis of defined requirements.

Participate to develop custom solutions on 
.NET platform.

Learn, interpret and comply with software 
change control methodology.

Convey formally status needed by software 
engineering project manager.

Ensure to proactively raise software project 
issues putting project in jeopardy.

Comply with Navitaire established policies 
and standards.

4) “Component-based Software Engineering 
allows faster delivery”. State whether this
 statement is true or false. Justify your 
answer.
       Component-based Software Engineering
allows faster delivery. Explanation: Due to 
using previously tested components they 
produce more reliable system at a faster rate.
